import { PublicKey } from "@solana/web3.js";
export declare const getMetadataPda: (mint: PublicKey) => PublicKey;
export declare const getMasterEditionPda: (mint: PublicKey) => PublicKey;
/**
 * Mainnet program ID
 */
export declare const NAME_TOKENIZER_ID: PublicKey;
/**
 * Devnet program ID (might not have the latest version deployed!)
 */
export declare const NAME_TOKENIZER_ID_DEVNET: PublicKey;
/**
 * This function can be used to create the mint of a domain name
 * @param nameAccount The domain name the mint represents
 * @param feePayer The fee payer of the transaction
 * @param programId The Name tokenizer program ID
 * @returns
 */
export declare const createMint: (nameAccount: PublicKey, feePayer: PublicKey, programId: PublicKey) => Promise<import("@solana/web3.js").TransactionInstruction[]>;
/**
 * This function can be used to create the central state collection
 * @param feePayer The fee payer of the transaction
 * @param programId The Name tokenizer program ID
 * @returns
 */
export declare const createCollection: (feePayer: PublicKey, programId: PublicKey) => Promise<import("@solana/web3.js").TransactionInstruction[]>;
/**
 * This function can be used to create to wrap a domain name into an NFT
 * @param name The domain name (without .sol)
 * @param uri The URI of the metadata
 * @param nameAccount The domain name key
 * @param nameOwner The owner of the domain name to tokenize
 * @param feePayer The fee payer of the transaction
 * @param programId The Name tokenizer program ID
 * @returns
 */
export declare const createNft: (name: string, uri: string, nameAccount: PublicKey, nameOwner: PublicKey, feePayer: PublicKey, programId: PublicKey) => Promise<import("@solana/web3.js").TransactionInstruction[]>;
/**
 * This function can be used to unwrap a domain name that has been tokenized
 * @param nameAccount The domain name key
 * @param nftOwner The owner of the NFT to redeem
 * @param programId The Name tokenizer program ID
 * @returns
 */
export declare const redeemNft: (nameAccount: PublicKey, nftOwner: PublicKey, programId: PublicKey) => Promise<import("@solana/web3.js").TransactionInstruction[]>;
/**
 * This function can be used to withdraw funds sent by mistake to an NftRecord while the domain was tokenized
 * @param nftMint The mint of the NFT
 * @param tokenMint The mint of the token to withdraw from the NftRecord
 * @param nftOwner The owner of the NFT (if the NFT has been redeemed it should be the latest person who redeemed)
 * @param nftRecord The NftRecord to which the funds were sent to
 * @param programId The Name tokenizer program ID
 * @returns
 */
export declare const withdrawTokens: (nftMint: PublicKey, tokenMint: PublicKey, nftOwner: PublicKey, nftRecord: PublicKey, programId: PublicKey) => Promise<import("@solana/web3.js").TransactionInstruction[]>;
