import { Schema } from "borsh";
import { PublicKey, TransactionInstruction } from "@solana/web3.js";
export interface AccountKey {
    pubkey: PublicKey;
    isSigner: boolean;
    isWritable: boolean;
}
export declare class createCollectionInstruction {
    tag: number;
    static schema: Schema;
    constructor();
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, collectionMint: PublicKey, edition: PublicKey, metadataAccount: PublicKey, centralState: PublicKey, centralStateNftAta: PublicKey, feePayer: PublicKey, splTokenProgram: PublicKey, metadataProgram: PublicKey, systemProgram: PublicKey, splNameServiceProgram: PublicKey, ataProgram: PublicKey, rentAccount: PublicKey): TransactionInstruction;
}
export declare class createMintInstruction {
    tag: number;
    static schema: Schema;
    constructor();
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, mint: PublicKey, nameAccount: PublicKey, centralState: PublicKey, splTokenProgram: PublicKey, systemProgram: PublicKey, rentAccount: PublicKey, feePayer: PublicKey): TransactionInstruction;
}
export declare class createNftInstruction {
    tag: number;
    name: string;
    uri: string;
    static schema: Schema;
    constructor(obj: {
        name: string;
        uri: string;
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, mint: PublicKey, nftDestination: PublicKey, nameAccount: PublicKey, nftRecord: PublicKey, nameOwner: PublicKey, metadataAccount: PublicKey, editionAccount: PublicKey, collectionMetadata: PublicKey, collectionMint: PublicKey, centralState: PublicKey, feePayer: PublicKey, splTokenProgram: PublicKey, metadataProgram: PublicKey, systemProgram: PublicKey, splNameServiceProgram: PublicKey, rentAccount: PublicKey, metadataSigner: PublicKey): TransactionInstruction;
}
export declare class redeemNftInstruction {
    tag: number;
    static schema: Schema;
    constructor();
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, mint: PublicKey, nftSource: PublicKey, nftOwner: PublicKey, nftRecord: PublicKey, nameAccount: PublicKey, splTokenProgram: PublicKey, splNameServiceProgram: PublicKey): TransactionInstruction;
}
export declare class withdrawTokensInstruction {
    tag: number;
    static schema: Schema;
    constructor();
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, nft: PublicKey, nftOwner: PublicKey, nftRecord: PublicKey, tokenDestination: PublicKey, tokenSource: PublicKey, splTokenProgram: PublicKey, systemProgram: PublicKey): TransactionInstruction;
}
export declare class editDataInstruction {
    tag: number;
    offset: number;
    data: number[];
    static schema: Schema;
    constructor(obj: {
        offset: number;
        data: number[];
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, nftOwner: PublicKey, nftAccount: PublicKey, nftRecord: PublicKey, nameAccount: PublicKey, splTokenProgram: PublicKey, splNameServiceProgram: PublicKey): TransactionInstruction;
}
