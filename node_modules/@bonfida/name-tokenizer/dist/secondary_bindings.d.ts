/// <reference types="node" />
import { Connection, PublicKey } from "@solana/web3.js";
/**
 * This function can be used to retrieve the NFTs of an owner
 * @param connection A solana RPC connection
 * @param owner The owner to retrieve NFTs for
 * @returns
 */
export declare const getNftForOwner: (connection: Connection, owner: PublicKey) => Promise<{
    pubkey: PublicKey;
    account: import("@solana/web3.js").AccountInfo<Buffer>;
}[]>;
/**
 * This function can used to retrieve the NFT record for a name account
 * @param connection A solana RPC connection
 * @param nameAccount The name account to retrieve the NftRecord for
 * @returns
 */
export declare const getMintFromNameAccount: (connection: Connection, nameAccount: PublicKey) => Promise<{
    pubkey: PublicKey;
    account: import("@solana/web3.js").AccountInfo<Buffer>;
}[]>;
/**
 * This function can be used to retrieve a NFT Record given a mint
 *
 * @param connection A solana RPC connection
 * @param mint The mint of the NFT Record
 * @returns
 */
export declare const getRecordFromMint: (connection: Connection, mint: PublicKey) => Promise<{
    pubkey: PublicKey;
    account: import("@solana/web3.js").AccountInfo<Buffer>;
}[]>;
/**
 * This function can be used to retrieve all the active NFT record
 * @param connection A solana RPC connection
 * @returns
 */
export declare const getActiveRecords: (connection: Connection) => Promise<{
    pubkey: PublicKey;
    account: import("@solana/web3.js").AccountInfo<Buffer>;
}[]>;
export declare const getMint: (domain: PublicKey) => PublicKey;
export declare const isTokenized: (connection: Connection, domain: PublicKey) => Promise<boolean>;
